// <auto-generated />
using System;
using Infrastructure.Commons.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TripDbContext))]
    [Migration("20250818210729_RemoveUnnecessaryNullableFields")]
    partial class RemoveUnnecessaryNullableFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Mountains.Regions.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Domain.Peaks.Peak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography (Point, 4326)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegionID");

                    b.ToTable("Peaks");
                });

            modelBuilder.Entity("Domain.Ranks.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequiredKms")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredPeaks")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Rank");
                });

            modelBuilder.Entity("Domain.ReachedPeaks.ReachedPeak", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("FirstTime")
                        .HasColumnType("boolean");

                    b.Property<int>("PeakId")
                        .HasColumnType("integer");

                    b.Property<long?>("ReachedAtDistanceMeters")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReachedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PeakId");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("ReachedPeaks");
                });

            modelBuilder.Entity("Domain.TripAnalytics.Entities.ElevationProfile.ElevationProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("GainsData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("ElevationProfiles");
                });

            modelBuilder.Entity("Domain.TripAnalytics.Entities.PeaksAnalytics.PeaksAnalytic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("New")
                        .HasColumnType("bigint");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Unique")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PeaksAnalytics");
                });

            modelBuilder.Entity("Domain.TripAnalytics.TripAnalytic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ElevationProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PeaksAnalyticsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("TripAnalytics");
                });

            modelBuilder.Entity("Domain.Trips.Entities.GpxFiles.GpxFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GpxFiles");
                });

            modelBuilder.Entity("Domain.Trips.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GpxFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PeakId")
                        .HasColumnType("integer");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("TripDay")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PeakId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Domain.Users.Entities.UserStats", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("FirstHikeDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("LastHikeDate")
                        .HasColumnType("date");

                    b.Property<long>("LongestTripMeters")
                        .HasColumnType("bigint");

                    b.Property<long>("RegionsVisited")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalAscentMeters")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalDescentMeters")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalDistanceMeters")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("TotalDuration")
                        .HasColumnType("interval");

                    b.Property<long>("TotalPeaks")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalTrips")
                        .HasColumnType("bigint");

                    b.Property<long>("UniquePeaks")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserStats");
                });

            modelBuilder.Entity("Domain.Users.RegionProgresses.RegionProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PeakVisits")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<short>("TotalPeaksInRegion")
                        .HasColumnType("smallint");

                    b.Property<short>("TotalReachedPeaks")
                        .HasColumnType("smallint");

                    b.Property<short>("UniqueReachedPeaks")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("RegionProgress");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("BirthDay")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int?>("RankId")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RankId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Peaks.Peak", b =>
                {
                    b.HasOne("Domain.Mountains.Regions.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.ReachedPeaks.ReachedPeak", b =>
                {
                    b.HasOne("Domain.Peaks.Peak", "Peak")
                        .WithMany()
                        .HasForeignKey("PeakId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Trips.Trip", "Trip")
                        .WithMany("Peaks")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Peak");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.TripAnalytics.Entities.ElevationProfile.ElevationProfile", b =>
                {
                    b.HasOne("Domain.TripAnalytics.TripAnalytic", null)
                        .WithOne("ElevationProfile")
                        .HasForeignKey("Domain.TripAnalytics.Entities.ElevationProfile.ElevationProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.Trips.ValueObjects.GpxPoint", "Start", b1 =>
                        {
                            b1.Property<Guid>("ElevationProfileId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Ele")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lon")
                                .HasColumnType("double precision");

                            b1.Property<DateTime?>("Time")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("ElevationProfileId");

                            b1.ToTable("ElevationProfiles");

                            b1.WithOwner()
                                .HasForeignKey("ElevationProfileId");
                        });

                    b.Navigation("Start")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.TripAnalytics.Entities.PeaksAnalytics.PeaksAnalytic", b =>
                {
                    b.HasOne("Domain.TripAnalytics.TripAnalytic", null)
                        .WithOne("PeaksAnalytic")
                        .HasForeignKey("Domain.TripAnalytics.Entities.PeaksAnalytics.PeaksAnalytic", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.TripAnalytics.TripAnalytic", b =>
                {
                    b.HasOne("Domain.Trips.Trip", null)
                        .WithOne("Analytics")
                        .HasForeignKey("Domain.TripAnalytics.TripAnalytic", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.TripAnalytics.ValueObjects.RouteAnalytics.RouteAnalytic", "RouteAnalytics", b1 =>
                        {
                            b1.Property<Guid>("TripAnalyticId")
                                .HasColumnType("uuid");

                            b1.Property<float>("AverageAscentSlopePercent")
                                .HasColumnType("real");

                            b1.Property<float>("AverageDescentSlopePercent")
                                .HasColumnType("real");

                            b1.Property<float>("AverageSlopePercent")
                                .HasColumnType("real");

                            b1.Property<double>("HighestElevationMeters")
                                .HasColumnType("double precision");

                            b1.Property<double>("LowestElevationMeters")
                                .HasColumnType("double precision");

                            b1.Property<double>("TotalAscentMeters")
                                .HasColumnType("double precision");

                            b1.Property<double>("TotalDescentMeters")
                                .HasColumnType("double precision");

                            b1.Property<double>("TotalDistanceMeters")
                                .HasColumnType("double precision");

                            b1.HasKey("TripAnalyticId");

                            b1.ToTable("TripAnalytics");

                            b1.WithOwner()
                                .HasForeignKey("TripAnalyticId");
                        });

                    b.OwnsOne("Domain.TripAnalytics.ValueObjects.TimeAnalytics.TimeAnalytic", "TimeAnalytics", b1 =>
                        {
                            b1.Property<Guid>("TripAnalyticId")
                                .HasColumnType("uuid");

                            b1.Property<TimeSpan>("ActiveTime")
                                .HasColumnType("interval");

                            b1.Property<TimeSpan>("AscentTime")
                                .HasColumnType("interval");

                            b1.Property<double>("AverageAscentKph")
                                .HasColumnType("double precision");

                            b1.Property<double>("AverageDescentKph")
                                .HasColumnType("double precision");

                            b1.Property<double>("AverageSpeedKph")
                                .HasColumnType("double precision");

                            b1.Property<TimeSpan>("DescentTime")
                                .HasColumnType("interval");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("interval");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<TimeSpan>("IdleTime")
                                .HasColumnType("interval");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TripAnalyticId");

                            b1.ToTable("TripAnalytics");

                            b1.WithOwner()
                                .HasForeignKey("TripAnalyticId");
                        });

                    b.Navigation("RouteAnalytics");

                    b.Navigation("TimeAnalytics");
                });

            modelBuilder.Entity("Domain.Trips.Entities.GpxFiles.GpxFile", b =>
                {
                    b.HasOne("Domain.Trips.Trip", null)
                        .WithOne("GpxFile")
                        .HasForeignKey("Domain.Trips.Entities.GpxFiles.GpxFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Trips.Trip", b =>
                {
                    b.HasOne("Domain.Peaks.Peak", "Target")
                        .WithMany()
                        .HasForeignKey("PeakId");

                    b.HasOne("Domain.Mountains.Regions.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Target");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.Entities.UserStats", b =>
                {
                    b.HasOne("Domain.Users.User", null)
                        .WithOne("Stats")
                        .HasForeignKey("Domain.Users.Entities.UserStats", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Users.RegionProgresses.RegionProgress", b =>
                {
                    b.HasOne("Domain.Mountains.Regions.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany("RegionProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.HasOne("Domain.Ranks.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.TripAnalytics.TripAnalytic", b =>
                {
                    b.Navigation("ElevationProfile");

                    b.Navigation("PeaksAnalytic");
                });

            modelBuilder.Entity("Domain.Trips.Trip", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("GpxFile");

                    b.Navigation("Peaks");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Navigation("RegionProgresses");

                    b.Navigation("Stats")
                        .IsRequired();

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
