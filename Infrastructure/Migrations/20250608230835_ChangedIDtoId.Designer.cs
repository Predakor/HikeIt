// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TripDbContext))]
    [Migration("20250608230835_ChangedIDtoId")]
    partial class ChangedIDtoId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entiites.Peaks.Peak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionID");

                    b.ToTable("Peaks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Height = 1603,
                            Name = "Śnieżka",
                            RegionID = 22
                        },
                        new
                        {
                            Id = 2,
                            Height = 1346,
                            Name = "Rysy",
                            RegionID = 1
                        },
                        new
                        {
                            Id = 3,
                            Height = 2050,
                            Name = "Giewont",
                            RegionID = 1
                        },
                        new
                        {
                            Id = 4,
                            Height = 1367,
                            Name = "Czupel",
                            RegionID = 3
                        });
                });

            modelBuilder.Entity("Domain.Entiites.Regions.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tatry"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pieniny"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Beskid Śląski"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Beskid Żywiecki"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Beskid Mały"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Beskid Makowski"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Beskid Wyspowy"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Gorce"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Beskid Sądecki"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Beskid Niski"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Bieszczady"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Góry Świętokrzyskie"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Góry Sowie"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Góry Stołowe"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Góry Bystrzyckie"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Góry Orlickie"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Góry Bialskie"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Góry Złote"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Góry Opawskie"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Góry Bardzkie"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Masyw Śnieżnika"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Karkonosze"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Góry Izerskie"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Rudawy Janowickie"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Sudety Wałbrzyskie"
                        });
                });

            modelBuilder.Entity("Domain.Entiites.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("BirthDay")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a4f8c5b-19b7-4a6a-89c0-f9a2e98a9380"),
                            BirthDay = new DateOnly(2002, 4, 15),
                            Email = "mistrzbiznesu@wp.pl",
                            Name = "Janusz"
                        },
                        new
                        {
                            Id = new Guid("183a96d7-9c20-4b18-b65b-d5d6676b57aa"),
                            BirthDay = new DateOnly(1995, 8, 20),
                            Email = "kasia.wandziak@wp.pl",
                            Name = "Kasia"
                        },
                        new
                        {
                            Id = new Guid("e5be7d3d-8320-4ef9-b60d-92b5464f2f1b"),
                            BirthDay = new DateOnly(1988, 3, 2),
                            Email = "marek.kowalski@gmail.com",
                            Name = "Marek"
                        },
                        new
                        {
                            Id = new Guid("b91a0ed5-40a1-447e-8f48-c8d1e89c7c90"),
                            BirthDay = new DateOnly(1990, 12, 11),
                            Email = "ewa.nowak@outlook.com",
                            Name = "Ewa"
                        });
                });

            modelBuilder.Entity("Domain.ReachedPeaks.ReachedPeak", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NewPeaksAnalyticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PeakId")
                        .HasColumnType("int");

                    b.Property<Guid?>("PeaksAnalyticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TimeReached")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NewPeaksAnalyticId");

                    b.HasIndex("PeakId");

                    b.HasIndex("PeaksAnalyticId");

                    b.HasIndex("TripId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ReachedPeak");
                });

            modelBuilder.Entity("Domain.TripAnalytics.TripAnalytic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TripAnalytic");
                });

            modelBuilder.Entity("Domain.TripAnalytics.ValueObjects.PeaksAnalytics.PeaksAnalytic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PeaksAnalytic");
                });

            modelBuilder.Entity("Domain.Trips.Entities.GpxFiles.GpxFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("GpxFiles");
                });

            modelBuilder.Entity("Domain.Trips.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GpxFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PeakId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<Guid?>("TripAnalyticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("TripDay")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GpxFileId")
                        .IsUnique()
                        .HasFilter("[GpxFileId] IS NOT NULL");

                    b.HasIndex("PeakId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TripAnalyticId")
                        .IsUnique()
                        .HasFilter("[TripAnalyticId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b91a0ed5-40a1-447e-8f48-c8d1e89c7c91"),
                            Name = "Wycieczka na śnieżke",
                            RegionId = 22,
                            TripDay = new DateOnly(2023, 5, 1),
                            UserId = new Guid("7a4f8c5b-19b7-4a6a-89c0-f9a2e98a9380")
                        },
                        new
                        {
                            Id = new Guid("b91a0ed5-40a1-447e-8f48-c8d1e89c7c92"),
                            Name = "Śnieżne kotły",
                            RegionId = 22,
                            TripDay = new DateOnly(2025, 1, 16),
                            UserId = new Guid("7a4f8c5b-19b7-4a6a-89c0-f9a2e98a9380")
                        });
                });

            modelBuilder.Entity("Domain.Entiites.Peaks.Peak", b =>
                {
                    b.HasOne("Domain.Entiites.Regions.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.ReachedPeaks.ReachedPeak", b =>
                {
                    b.HasOne("Domain.TripAnalytics.ValueObjects.PeaksAnalytics.PeaksAnalytic", null)
                        .WithMany("NewPeaks")
                        .HasForeignKey("NewPeaksAnalyticId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entiites.Peaks.Peak", "Peak")
                        .WithMany()
                        .HasForeignKey("PeakId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.TripAnalytics.ValueObjects.PeaksAnalytics.PeaksAnalytic", null)
                        .WithMany("ReachedPeaks")
                        .HasForeignKey("PeaksAnalyticId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Trips.Trip", "Trip")
                        .WithOne()
                        .HasForeignKey("Domain.ReachedPeaks.ReachedPeak", "TripId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entiites.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Peak");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.TripAnalytics.TripAnalytic", b =>
                {
                    b.OwnsOne("Domain.TripAnalytics.Builders.TripAnalyticBuilder.ElevationProfile", "ElevationProfile", b1 =>
                        {
                            b1.Property<Guid>("TripAnalyticId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TripAnalyticId");

                            b1.ToTable("TripAnalytic");

                            b1.WithOwner()
                                .HasForeignKey("TripAnalyticId");
                        });

                    b.OwnsOne("Domain.TripAnalytics.ValueObjects.RouteAnalytics.RouteAnalytic", "RouteAnalytics", b1 =>
                        {
                            b1.Property<Guid>("TripAnalyticId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("AverageAscentSlope")
                                .HasColumnType("real");

                            b1.Property<float>("AverageDescentSlope")
                                .HasColumnType("real");

                            b1.Property<float>("AverageSlope")
                                .HasColumnType("real");

                            b1.Property<double>("HighestElevation")
                                .HasColumnType("float");

                            b1.Property<double>("LowestElevation")
                                .HasColumnType("float");

                            b1.Property<double>("TotalAscent")
                                .HasColumnType("float");

                            b1.Property<double>("TotalDescent")
                                .HasColumnType("float");

                            b1.Property<double>("TotalDistanceKm")
                                .HasColumnType("float");

                            b1.HasKey("TripAnalyticId");

                            b1.ToTable("TripAnalytic");

                            b1.WithOwner()
                                .HasForeignKey("TripAnalyticId");
                        });

                    b.OwnsOne("Domain.TripAnalytics.ValueObjects.TimeAnalytics.TimeAnalytic", "TimeAnalytics", b1 =>
                        {
                            b1.Property<Guid>("TripAnalyticId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeSpan>("ActiveTime")
                                .HasColumnType("time");

                            b1.Property<TimeSpan>("AscentTime")
                                .HasColumnType("time");

                            b1.Property<double>("AverageAscentKph")
                                .HasColumnType("float");

                            b1.Property<double>("AverageDescentKph")
                                .HasColumnType("float");

                            b1.Property<double>("AverageSpeedKph")
                                .HasColumnType("float");

                            b1.Property<TimeSpan>("DescentTime")
                                .HasColumnType("time");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("time");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("datetime2");

                            b1.Property<TimeSpan>("IdleTime")
                                .HasColumnType("time");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("datetime2");

                            b1.HasKey("TripAnalyticId");

                            b1.ToTable("TripAnalytic");

                            b1.WithOwner()
                                .HasForeignKey("TripAnalyticId");
                        });

                    b.Navigation("ElevationProfile");

                    b.Navigation("RouteAnalytics");

                    b.Navigation("TimeAnalytics");
                });

            modelBuilder.Entity("Domain.TripAnalytics.ValueObjects.PeaksAnalytics.PeaksAnalytic", b =>
                {
                    b.HasOne("Domain.TripAnalytics.TripAnalytic", null)
                        .WithOne("PeaksAnalytics")
                        .HasForeignKey("Domain.TripAnalytics.ValueObjects.PeaksAnalytics.PeaksAnalytic", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Trips.Entities.GpxFiles.GpxFile", b =>
                {
                    b.HasOne("Domain.Entiites.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Trips.Trip", b =>
                {
                    b.HasOne("Domain.Trips.Entities.GpxFiles.GpxFile", "GpxFile")
                        .WithOne()
                        .HasForeignKey("Domain.Trips.Trip", "GpxFileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entiites.Peaks.Peak", "Target")
                        .WithMany()
                        .HasForeignKey("PeakId");

                    b.HasOne("Domain.Entiites.Regions.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.TripAnalytics.TripAnalytic", "Analytics")
                        .WithOne()
                        .HasForeignKey("Domain.Trips.Trip", "TripAnalyticId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entiites.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Analytics");

                    b.Navigation("GpxFile");

                    b.Navigation("Region");

                    b.Navigation("Target");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.TripAnalytics.TripAnalytic", b =>
                {
                    b.Navigation("PeaksAnalytics");
                });

            modelBuilder.Entity("Domain.TripAnalytics.ValueObjects.PeaksAnalytics.PeaksAnalytic", b =>
                {
                    b.Navigation("NewPeaks");

                    b.Navigation("ReachedPeaks");
                });
#pragma warning restore 612, 618
        }
    }
}
