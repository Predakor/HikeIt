// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TripDbContext))]
    [Migration("20250629172015_Rebase")]
    partial class Rebase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entiites.Peaks.Peak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionID");

                    b.ToTable("Peaks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Height = 1603,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (50.736 15.739)"),
                            Name = "Śnieżka",
                            RegionID = 22
                        },
                        new
                        {
                            Id = 2,
                            Height = 1346,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.179 20.088)"),
                            Name = "Rysy",
                            RegionID = 1
                        },
                        new
                        {
                            Id = 3,
                            Height = 2050,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.303 19.926)"),
                            Name = "Giewont",
                            RegionID = 1
                        },
                        new
                        {
                            Id = 4,
                            Height = 1367,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.784 19.102)"),
                            Name = "Czupel",
                            RegionID = 3
                        },
                        new
                        {
                            Id = 5,
                            Height = 1725,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.21 20.04)"),
                            Name = "Lodowy Szczyt",
                            RegionID = 1
                        },
                        new
                        {
                            Id = 6,
                            Height = 1894,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.606 19.546)"),
                            Name = "Babia Góra",
                            RegionID = 4
                        },
                        new
                        {
                            Id = 7,
                            Height = 1153,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.624 19.523)"),
                            Name = "Pilsko",
                            RegionID = 4
                        },
                        new
                        {
                            Id = 8,
                            Height = 982,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.467 20.535)"),
                            Name = "Radziejowa",
                            RegionID = 9
                        },
                        new
                        {
                            Id = 9,
                            Height = 1050,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (50.828 16.7)"),
                            Name = "Ślęża",
                            RegionID = 22
                        },
                        new
                        {
                            Id = 10,
                            Height = 948,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.464 20.966)"),
                            Name = "Jaworzyna Krynicka",
                            RegionID = 9
                        },
                        new
                        {
                            Id = 11,
                            Height = 1335,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.616 19.269)"),
                            Name = "Wielka Racza",
                            RegionID = 5
                        },
                        new
                        {
                            Id = 12,
                            Height = 1257,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.645 19.866)"),
                            Name = "Luboń Wielki",
                            RegionID = 6
                        },
                        new
                        {
                            Id = 13,
                            Height = 1152,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.635 19.335)"),
                            Name = "Kiczera",
                            RegionID = 3
                        },
                        new
                        {
                            Id = 14,
                            Height = 1050,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (50.79 20.792)"),
                            Name = "Łysica",
                            RegionID = 12
                        },
                        new
                        {
                            Id = 15,
                            Height = 944,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (50.716 16.27)"),
                            Name = "Chełmiec",
                            RegionID = 21
                        },
                        new
                        {
                            Id = 16,
                            Height = 746,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (51.116 15.776)"),
                            Name = "Trójgarb",
                            RegionID = 24
                        },
                        new
                        {
                            Id = 17,
                            Height = 860,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.796 19.847)"),
                            Name = "Lubomir",
                            RegionID = 7
                        },
                        new
                        {
                            Id = 18,
                            Height = 1150,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.643 20.281)"),
                            Name = "Mogielica",
                            RegionID = 7
                        },
                        new
                        {
                            Id = 19,
                            Height = 970,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (50.9 15.73)"),
                            Name = "Jelenia Góra",
                            RegionID = 22
                        },
                        new
                        {
                            Id = 20,
                            Height = 1685,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (49.218 20.02)"),
                            Name = "Orla Perć",
                            RegionID = 1
                        });
                });

            modelBuilder.Entity("Domain.Entiites.Regions.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tatry"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pieniny"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Beskid Śląski"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Beskid Żywiecki"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Beskid Mały"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Beskid Makowski"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Beskid Wyspowy"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Gorce"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Beskid Sądecki"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Beskid Niski"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Bieszczady"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Góry Świętokrzyskie"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Góry Sowie"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Góry Stołowe"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Góry Bystrzyckie"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Góry Orlickie"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Góry Bialskie"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Góry Złote"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Góry Opawskie"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Góry Bardzkie"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Masyw Śnieżnika"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Karkonosze"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Góry Izerskie"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Rudawy Janowickie"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Sudety Wałbrzyskie"
                        });
                });

            modelBuilder.Entity("Domain.Entiites.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("BirthDay")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.ReachedPeaks.ReachedPeak", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("FirstTime")
                        .HasColumnType("bit");

                    b.Property<int>("PeakId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeReached")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PeakId");

                    b.HasIndex("TripId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ReachedPeaks");
                });

            modelBuilder.Entity("Domain.TripAnalytics.Entities.ElevationProfile.ElevationProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("GainsData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("ElevationProfiles");
                });

            modelBuilder.Entity("Domain.TripAnalytics.Entities.PeaksAnalytics.PeaksAnalytic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PeaksAnalytic");
                });

            modelBuilder.Entity("Domain.TripAnalytics.TripAnalytic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TripAnalytics");
                });

            modelBuilder.Entity("Domain.Trips.Entities.GpxFiles.GpxFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GpxFiles");
                });

            modelBuilder.Entity("Domain.Trips.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GpxFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PeakId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("TripDay")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PeakId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entiites.Peaks.Peak", b =>
                {
                    b.HasOne("Domain.Entiites.Regions.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.ReachedPeaks.ReachedPeak", b =>
                {
                    b.HasOne("Domain.Entiites.Peaks.Peak", "Peak")
                        .WithMany()
                        .HasForeignKey("PeakId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Trips.Trip", "Trip")
                        .WithOne()
                        .HasForeignKey("Domain.ReachedPeaks.ReachedPeak", "TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entiites.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Peak");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.TripAnalytics.Entities.ElevationProfile.ElevationProfile", b =>
                {
                    b.HasOne("Domain.TripAnalytics.TripAnalytic", null)
                        .WithOne("ElevationProfile")
                        .HasForeignKey("Domain.TripAnalytics.Entities.ElevationProfile.ElevationProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.Trips.ValueObjects.GpxPoint", "Start", b1 =>
                        {
                            b1.Property<Guid>("ElevationProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Ele")
                                .HasColumnType("float");

                            b1.Property<double>("Lat")
                                .HasColumnType("float");

                            b1.Property<double>("Lon")
                                .HasColumnType("float");

                            b1.Property<DateTime?>("Time")
                                .HasColumnType("datetime2");

                            b1.HasKey("ElevationProfileId");

                            b1.ToTable("ElevationProfiles");

                            b1.WithOwner()
                                .HasForeignKey("ElevationProfileId");
                        });

                    b.Navigation("Start")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.TripAnalytics.Entities.PeaksAnalytics.PeaksAnalytic", b =>
                {
                    b.HasOne("Domain.TripAnalytics.TripAnalytic", null)
                        .WithOne("PeaksAnalytic")
                        .HasForeignKey("Domain.TripAnalytics.Entities.PeaksAnalytics.PeaksAnalytic", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.TripAnalytics.Entities.PeaksAnalytics.PeakSummary", "Summary", b1 =>
                        {
                            b1.Property<Guid>("PeaksAnalyticId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("TotalPeaks")
                                .HasColumnType("int");

                            b1.HasKey("PeaksAnalyticId");

                            b1.ToTable("PeaksAnalytic");

                            b1.WithOwner()
                                .HasForeignKey("PeaksAnalyticId");
                        });

                    b.Navigation("Summary");
                });

            modelBuilder.Entity("Domain.TripAnalytics.TripAnalytic", b =>
                {
                    b.HasOne("Domain.Trips.Trip", null)
                        .WithOne("Analytics")
                        .HasForeignKey("Domain.TripAnalytics.TripAnalytic", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.TripAnalytics.ValueObjects.RouteAnalytics.RouteAnalytic", "RouteAnalytics", b1 =>
                        {
                            b1.Property<Guid>("TripAnalyticId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("AverageAscentSlope")
                                .HasColumnType("real");

                            b1.Property<float>("AverageDescentSlope")
                                .HasColumnType("real");

                            b1.Property<float>("AverageSlope")
                                .HasColumnType("real");

                            b1.Property<double>("HighestElevation")
                                .HasColumnType("float");

                            b1.Property<double>("LowestElevation")
                                .HasColumnType("float");

                            b1.Property<double>("TotalAscent")
                                .HasColumnType("float");

                            b1.Property<double>("TotalDescent")
                                .HasColumnType("float");

                            b1.Property<double>("TotalDistanceKm")
                                .HasColumnType("float");

                            b1.HasKey("TripAnalyticId");

                            b1.ToTable("TripAnalytics");

                            b1.WithOwner()
                                .HasForeignKey("TripAnalyticId");
                        });

                    b.OwnsOne("Domain.TripAnalytics.ValueObjects.TimeAnalytics.TimeAnalytic", "TimeAnalytics", b1 =>
                        {
                            b1.Property<Guid>("TripAnalyticId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeSpan>("ActiveTime")
                                .HasColumnType("time");

                            b1.Property<TimeSpan>("AscentTime")
                                .HasColumnType("time");

                            b1.Property<double>("AverageAscentKph")
                                .HasColumnType("float");

                            b1.Property<double>("AverageDescentKph")
                                .HasColumnType("float");

                            b1.Property<double>("AverageSpeedKph")
                                .HasColumnType("float");

                            b1.Property<TimeSpan>("DescentTime")
                                .HasColumnType("time");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("time");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("datetime2");

                            b1.Property<TimeSpan>("IdleTime")
                                .HasColumnType("time");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("datetime2");

                            b1.HasKey("TripAnalyticId");

                            b1.ToTable("TripAnalytics");

                            b1.WithOwner()
                                .HasForeignKey("TripAnalyticId");
                        });

                    b.Navigation("RouteAnalytics");

                    b.Navigation("TimeAnalytics");
                });

            modelBuilder.Entity("Domain.Trips.Entities.GpxFiles.GpxFile", b =>
                {
                    b.HasOne("Domain.Trips.Trip", null)
                        .WithOne("GpxFile")
                        .HasForeignKey("Domain.Trips.Entities.GpxFiles.GpxFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Trips.Trip", b =>
                {
                    b.HasOne("Domain.Entiites.Peaks.Peak", "Target")
                        .WithMany()
                        .HasForeignKey("PeakId");

                    b.HasOne("Domain.Entiites.Regions.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entiites.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Target");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entiites.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entiites.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entiites.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entiites.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.TripAnalytics.TripAnalytic", b =>
                {
                    b.Navigation("ElevationProfile");

                    b.Navigation("PeaksAnalytic");
                });

            modelBuilder.Entity("Domain.Trips.Trip", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("GpxFile");
                });
#pragma warning restore 612, 618
        }
    }
}
